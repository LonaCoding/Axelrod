>>> Output of Elitist Selection (Modified) Moran Process <<<
------------------------------------------------------------
Experiment parameters:
1. Player Agents: 4
ShortMemDynamicThreshold: 0, False
ShortMemProbabilistic: 50
ShortMemProbabilisticFuzzy: 10, 5
Tit For Tat
2. newFileNameNumber for plot:           101
3. (Number of) turns:                    200
4. Starting seed (firstSeed):            524
5. iterations:                           20
6. splitThresholdPercentile:             50%
7. ConvergeScoreGenLimit:                100
8. displayOutput:                        True
9. createPlot:                           2
10.PlotFileType:                         PNG
11.(use) csv (as output's file format):  False
12.testing (mode):                       False
------------------------------------------------------------
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [1, 0]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [2, 3]
====================================
cloned = 2
killed = 1
cloned = 3
killed = 0
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [1, 0]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [2, 3]
====================================
cloned = 2
killed = 1
cloned = 3
killed = 0
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [0, 1]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [2, 3]
====================================
cloned = 2
killed = 0
cloned = 3
killed = 1
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [2, 1]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [0, 3]
====================================
cloned = 0
killed = 2
cloned = 3
killed = 1
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [1, 0]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [2, 3]
====================================
cloned = 2
killed = 1
cloned = 3
killed = 0
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [1, 0]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [2, 3]
====================================
cloned = 2
killed = 1
cloned = 3
killed = 0
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [2, 1]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [0, 3]
====================================
cloned = 0
killed = 2
cloned = 3
killed = 1
Trial run 1/seed 524:
..................................................
winner: Tit For Tat
==================================================
List of players:
ShortMemDynamicThreshold: 0, False
ShortMemProbabilistic: 50
ShortMemProbabilisticFuzzy: 10, 5
Tit For Tat
==================================================
Results:
[Counter({'ShortMemDynamicThreshold: 0, False': 1,
          'ShortMemProbabilistic: 50': 1,
          'ShortMemProbabilisticFuzzy: 10, 5': 1,
          'Tit For Tat': 1}),
 Counter({'Tit For Tat': 2, 'ShortMemProbabilisticFuzzy: 10, 5': 2}),
 Counter({'Tit For Tat': 2, 'ShortMemProbabilisticFuzzy: 10, 5': 2}),
 Counter({'ShortMemProbabilisticFuzzy: 10, 5': 2, 'Tit For Tat': 2}),
 Counter({'ShortMemProbabilisticFuzzy: 10, 5': 2, 'Tit For Tat': 2}),
 Counter({'Tit For Tat': 2, 'ShortMemProbabilisticFuzzy: 10, 5': 2}),
 Counter({'Tit For Tat': 2, 'ShortMemProbabilisticFuzzy: 10, 5': 2}),
 Counter({'Tit For Tat': 4})]
--------------------------------------------------
Score:
[[9.0, 9.0, 9.0, 9.0],
 [9.0, 9.0, 9.0, 9.0],
 [9.0, 9.0, 9.0, 9.0],
 [9.0, 9.0, 9.0, 9.0],
 [9.0, 9.0, 9.0, 9.0],
 [9.0, 9.0, 9.0, 9.0],
 [9.0, 9.0, 9.0, 9.0]]
***************************************************
***************************************************
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [2, 1]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [0, 3]
====================================
cloned = 0
killed = 2
cloned = 3
killed = 1
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [0, 1]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [2, 3]
====================================
cloned = 2
killed = 0
cloned = 3
killed = 1
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [0, 1]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [2, 3]
====================================
cloned = 2
killed = 0
cloned = 3
killed = 1
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [0, 1]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [2, 3]
====================================
cloned = 2
killed = 0
cloned = 3
killed = 1
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [0, 1]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [2, 3]
====================================
cloned = 2
killed = 0
cloned = 3
killed = 1
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [2, 0]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [1, 3]
====================================
cloned = 1
killed = 2
cloned = 3
killed = 0
Trial run 2/seed 525:
..................................................
winner: Tit For Tat
==================================================
List of players:
ShortMemDynamicThreshold: 0, False
ShortMemProbabilistic: 50
ShortMemProbabilisticFuzzy: 10, 5
Tit For Tat
==================================================
Results:
[Counter({'ShortMemDynamicThreshold: 0, False': 1,
          'ShortMemProbabilistic: 50': 1,
          'ShortMemProbabilisticFuzzy: 10, 5': 1,
          'Tit For Tat': 1}),
 Counter({'ShortMemDynamicThreshold: 0, False': 2, 'Tit For Tat': 2}),
 Counter({'ShortMemDynamicThreshold: 0, False': 2, 'Tit For Tat': 2}),
 Counter({'ShortMemDynamicThreshold: 0, False': 2, 'Tit For Tat': 2}),
 Counter({'ShortMemDynamicThreshold: 0, False': 2, 'Tit For Tat': 2}),
 Counter({'ShortMemDynamicThreshold: 0, False': 2, 'Tit For Tat': 2}),
 Counter({'Tit For Tat': 4})]
--------------------------------------------------
Score:
[[9.0, 9.0, 9.0, 9.0],
 [9.0, 9.0, 9.0, 9.0],
 [9.0, 9.0, 9.0, 9.0],
 [9.0, 9.0, 9.0, 9.0],
 [9.0, 9.0, 9.0, 9.0],
 [9.0, 9.0, 9.0, 9.0]]
***************************************************
***************************************************
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [2, 1]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [0, 3]
====================================
cloned = 0
killed = 2
cloned = 3
killed = 1
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [0, 1]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [2, 3]
====================================
cloned = 2
killed = 0
cloned = 3
killed = 1
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [1, 0]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [2, 3]
====================================
cloned = 2
killed = 1
cloned = 3
killed = 0
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [2, 0]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [1, 3]
====================================
cloned = 1
killed = 2
cloned = 3
killed = 0
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [0, 1]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [2, 3]
====================================
cloned = 2
killed = 0
cloned = 3
killed = 1
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [1, 2]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [0, 3]
====================================
cloned = 0
killed = 1
cloned = 3
killed = 2
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [2, 1]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [0, 3]
====================================
cloned = 0
killed = 2
cloned = 3
killed = 1
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [1, 2]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [0, 3]
====================================
cloned = 0
killed = 1
cloned = 3
killed = 2
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [2, 1]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [0, 3]
====================================
cloned = 0
killed = 2
cloned = 3
killed = 1
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [1, 2]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [0, 3]
====================================
cloned = 0
killed = 1
cloned = 3
killed = 2
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [1, 0]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [2, 3]
====================================
cloned = 2
killed = 1
cloned = 3
killed = 0
Trial run 3/seed 526:
..................................................
winner: Tit For Tat
==================================================
List of players:
ShortMemDynamicThreshold: 0, False
ShortMemProbabilistic: 50
ShortMemProbabilisticFuzzy: 10, 5
Tit For Tat
==================================================
Results:
[Counter({'ShortMemDynamicThreshold: 0, False': 1,
          'ShortMemProbabilistic: 50': 1,
          'ShortMemProbabilisticFuzzy: 10, 5': 1,
          'Tit For Tat': 1}),
 Counter({'ShortMemDynamicThreshold: 0, False': 2, 'Tit For Tat': 2}),
 Counter({'ShortMemDynamicThreshold: 0, False': 2, 'Tit For Tat': 2}),
 Counter({'Tit For Tat': 2, 'ShortMemDynamicThreshold: 0, False': 2}),
 Counter({'Tit For Tat': 2, 'ShortMemDynamicThreshold: 0, False': 2}),
 Counter({'ShortMemDynamicThreshold: 0, False': 2, 'Tit For Tat': 2}),
 Counter({'ShortMemDynamicThreshold: 0, False': 2, 'Tit For Tat': 2}),
 Counter({'ShortMemDynamicThreshold: 0, False': 2, 'Tit For Tat': 2}),
 Counter({'ShortMemDynamicThreshold: 0, False': 2, 'Tit For Tat': 2}),
 Counter({'ShortMemDynamicThreshold: 0, False': 2, 'Tit For Tat': 2}),
 Counter({'ShortMemDynamicThreshold: 0, False': 2, 'Tit For Tat': 2}),
 Counter({'Tit For Tat': 4})]
--------------------------------------------------
Score:
[[9.0, 9.0, 9.0, 9.0],
 [9.0, 9.0, 9.0, 9.0],
 [9.0, 9.0, 9.0, 9.0],
 [9.0, 9.0, 9.0, 9.0],
 [9.0, 9.0, 9.0, 9.0],
 [9.0, 9.0, 9.0, 9.0],
 [9.0, 9.0, 9.0, 9.0],
 [9.0, 9.0, 9.0, 9.0],
 [9.0, 9.0, 9.0, 9.0],
 [9.0, 9.0, 9.0, 9.0],
 [9.0, 9.0, 9.0, 9.0]]
***************************************************
***************************************************
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [0, 2]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [1, 3]
====================================
cloned = 1
killed = 0
cloned = 3
killed = 2
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [2, 1]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [0, 3]
====================================
cloned = 0
killed = 2
cloned = 3
killed = 1
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [1, 2]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [0, 3]
====================================
cloned = 0
killed = 1
cloned = 3
killed = 2
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [0, 1]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [2, 3]
====================================
cloned = 2
killed = 0
cloned = 3
killed = 1
Trial run 4/seed 527:
..................................................
winner: Tit For Tat
==================================================
List of players:
ShortMemDynamicThreshold: 0, False
ShortMemProbabilistic: 50
ShortMemProbabilisticFuzzy: 10, 5
Tit For Tat
==================================================
Results:
[Counter({'ShortMemDynamicThreshold: 0, False': 1,
          'ShortMemProbabilistic: 50': 1,
          'ShortMemProbabilisticFuzzy: 10, 5': 1,
          'Tit For Tat': 1}),
 Counter({'ShortMemProbabilistic: 50': 2, 'Tit For Tat': 2}),
 Counter({'ShortMemProbabilistic: 50': 2, 'Tit For Tat': 2}),
 Counter({'ShortMemProbabilistic: 50': 2, 'Tit For Tat': 2}),
 Counter({'Tit For Tat': 4})]
--------------------------------------------------
Score:
[[9.0, 9.0, 9.0, 9.0],
 [9.0, 9.0, 9.0, 9.0],
 [9.0, 9.0, 9.0, 9.0],
 [9.0, 9.0, 9.0, 9.0]]
***************************************************
***************************************************
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [2, 1]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [0, 3]
====================================
cloned = 0
killed = 2
cloned = 3
killed = 1
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [0, 2]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [1, 3]
====================================
cloned = 1
killed = 0
cloned = 3
killed = 2
Trial run 5/seed 528:
..................................................
winner: Tit For Tat
==================================================
List of players:
ShortMemDynamicThreshold: 0, False
ShortMemProbabilistic: 50
ShortMemProbabilisticFuzzy: 10, 5
Tit For Tat
==================================================
Results:
[Counter({'ShortMemDynamicThreshold: 0, False': 1,
          'ShortMemProbabilistic: 50': 1,
          'ShortMemProbabilisticFuzzy: 10, 5': 1,
          'Tit For Tat': 1}),
 Counter({'ShortMemDynamicThreshold: 0, False': 2, 'Tit For Tat': 2}),
 Counter({'Tit For Tat': 4})]
--------------------------------------------------
Score:
[[9.0, 9.0, 9.0, 9.0], [9.0, 9.0, 9.0, 9.0]]
***************************************************
***************************************************
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [1, 2]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [0, 3]
====================================
cloned = 0
killed = 1
cloned = 3
killed = 2
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [2, 1]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [0, 3]
====================================
cloned = 0
killed = 2
cloned = 3
killed = 1
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [2, 0]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [1, 3]
====================================
cloned = 1
killed = 2
cloned = 3
killed = 0
Trial run 6/seed 529:
..................................................
winner: Tit For Tat
==================================================
List of players:
ShortMemDynamicThreshold: 0, False
ShortMemProbabilistic: 50
ShortMemProbabilisticFuzzy: 10, 5
Tit For Tat
==================================================
Results:
[Counter({'ShortMemDynamicThreshold: 0, False': 1,
          'ShortMemProbabilistic: 50': 1,
          'ShortMemProbabilisticFuzzy: 10, 5': 1,
          'Tit For Tat': 1}),
 Counter({'ShortMemDynamicThreshold: 0, False': 2, 'Tit For Tat': 2}),
 Counter({'ShortMemDynamicThreshold: 0, False': 2, 'Tit For Tat': 2}),
 Counter({'Tit For Tat': 4})]
--------------------------------------------------
Score:
[[9.0, 9.0, 9.0, 9.0], [9.0, 9.0, 9.0, 9.0], [9.0, 9.0, 9.0, 9.0]]
***************************************************
***************************************************
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [0, 1]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [2, 3]
====================================
cloned = 2
killed = 0
cloned = 3
killed = 1
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [0, 1]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [2, 3]
====================================
cloned = 2
killed = 0
cloned = 3
killed = 1
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [2, 0]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [1, 3]
====================================
cloned = 1
killed = 2
cloned = 3
killed = 0
Trial run 7/seed 530:
..................................................
winner: Tit For Tat
==================================================
List of players:
ShortMemDynamicThreshold: 0, False
ShortMemProbabilistic: 50
ShortMemProbabilisticFuzzy: 10, 5
Tit For Tat
==================================================
Results:
[Counter({'ShortMemDynamicThreshold: 0, False': 1,
          'ShortMemProbabilistic: 50': 1,
          'ShortMemProbabilisticFuzzy: 10, 5': 1,
          'Tit For Tat': 1}),
 Counter({'ShortMemProbabilisticFuzzy: 10, 5': 2, 'Tit For Tat': 2}),
 Counter({'ShortMemProbabilisticFuzzy: 10, 5': 2, 'Tit For Tat': 2}),
 Counter({'Tit For Tat': 4})]
--------------------------------------------------
Score:
[[9.0, 9.0, 9.0, 9.0], [9.0, 9.0, 9.0, 9.0], [9.0, 9.0, 9.0, 9.0]]
***************************************************
***************************************************
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [0, 2]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [1, 3]
====================================
cloned = 1
killed = 0
cloned = 3
killed = 2
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [2, 1]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [0, 3]
====================================
cloned = 0
killed = 2
cloned = 3
killed = 1
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [0, 2]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [1, 3]
====================================
cloned = 1
killed = 0
cloned = 3
killed = 2
Trial run 8/seed 531:
..................................................
winner: Tit For Tat
==================================================
List of players:
ShortMemDynamicThreshold: 0, False
ShortMemProbabilistic: 50
ShortMemProbabilisticFuzzy: 10, 5
Tit For Tat
==================================================
Results:
[Counter({'ShortMemDynamicThreshold: 0, False': 1,
          'ShortMemProbabilistic: 50': 1,
          'ShortMemProbabilisticFuzzy: 10, 5': 1,
          'Tit For Tat': 1}),
 Counter({'ShortMemProbabilistic: 50': 2, 'Tit For Tat': 2}),
 Counter({'ShortMemProbabilistic: 50': 2, 'Tit For Tat': 2}),
 Counter({'Tit For Tat': 4})]
--------------------------------------------------
Score:
[[9.0, 9.0, 9.0, 9.0], [9.0, 9.0, 9.0, 9.0], [9.0, 9.0, 9.0, 9.0]]
***************************************************
***************************************************
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [2, 1]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [0, 3]
====================================
cloned = 0
killed = 2
cloned = 3
killed = 1
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [0, 1]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [2, 3]
====================================
cloned = 2
killed = 0
cloned = 3
killed = 1
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [2, 1]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [0, 3]
====================================
cloned = 0
killed = 2
cloned = 3
killed = 1
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [2, 1]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [0, 3]
====================================
cloned = 0
killed = 2
cloned = 3
killed = 1
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [2, 0]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [1, 3]
====================================
cloned = 1
killed = 2
cloned = 3
killed = 0
Trial run 9/seed 532:
..................................................
winner: Tit For Tat
==================================================
List of players:
ShortMemDynamicThreshold: 0, False
ShortMemProbabilistic: 50
ShortMemProbabilisticFuzzy: 10, 5
Tit For Tat
==================================================
Results:
[Counter({'ShortMemDynamicThreshold: 0, False': 1,
          'ShortMemProbabilistic: 50': 1,
          'ShortMemProbabilisticFuzzy: 10, 5': 1,
          'Tit For Tat': 1}),
 Counter({'ShortMemDynamicThreshold: 0, False': 2, 'Tit For Tat': 2}),
 Counter({'ShortMemDynamicThreshold: 0, False': 2, 'Tit For Tat': 2}),
 Counter({'ShortMemDynamicThreshold: 0, False': 2, 'Tit For Tat': 2}),
 Counter({'ShortMemDynamicThreshold: 0, False': 2, 'Tit For Tat': 2}),
 Counter({'Tit For Tat': 4})]
--------------------------------------------------
Score:
[[9.0, 9.0, 9.0, 9.0],
 [9.0, 9.0, 9.0, 9.0],
 [9.0, 9.0, 9.0, 9.0],
 [9.0, 9.0, 9.0, 9.0],
 [9.0, 9.0, 9.0, 9.0]]
***************************************************
***************************************************
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [2, 0]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [1, 3]
====================================
cloned = 1
killed = 2
cloned = 3
killed = 0
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [0, 2]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [1, 3]
====================================
cloned = 1
killed = 0
cloned = 3
killed = 2
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [2, 0]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [1, 3]
====================================
cloned = 1
killed = 2
cloned = 3
killed = 0
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [2, 0]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [1, 3]
====================================
cloned = 1
killed = 2
cloned = 3
killed = 0
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [2, 1]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [0, 3]
====================================
cloned = 0
killed = 2
cloned = 3
killed = 1
Trial run 10/seed 533:
..................................................
winner: Tit For Tat
==================================================
List of players:
ShortMemDynamicThreshold: 0, False
ShortMemProbabilistic: 50
ShortMemProbabilisticFuzzy: 10, 5
Tit For Tat
==================================================
Results:
[Counter({'ShortMemDynamicThreshold: 0, False': 1,
          'ShortMemProbabilistic: 50': 1,
          'ShortMemProbabilisticFuzzy: 10, 5': 1,
          'Tit For Tat': 1}),
 Counter({'Tit For Tat': 2, 'ShortMemProbabilistic: 50': 2}),
 Counter({'ShortMemProbabilistic: 50': 2, 'Tit For Tat': 2}),
 Counter({'Tit For Tat': 2, 'ShortMemProbabilistic: 50': 2}),
 Counter({'Tit For Tat': 2, 'ShortMemProbabilistic: 50': 2}),
 Counter({'Tit For Tat': 4})]
--------------------------------------------------
Score:
[[9.0, 9.0, 9.0, 9.0],
 [9.0, 9.0, 9.0, 9.0],
 [9.0, 9.0, 9.0, 9.0],
 [9.0, 9.0, 9.0, 9.0],
 [9.0, 9.0, 9.0, 9.0]]
***************************************************
***************************************************
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [0, 1]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [2, 3]
====================================
cloned = 2
killed = 0
cloned = 3
killed = 1
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [1, 0]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [2, 3]
====================================
cloned = 2
killed = 1
cloned = 3
killed = 0
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [1, 0]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [2, 3]
====================================
cloned = 2
killed = 1
cloned = 3
killed = 0
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [2, 1]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [0, 3]
====================================
cloned = 0
killed = 2
cloned = 3
killed = 1
Trial run 11/seed 534:
..................................................
winner: Tit For Tat
==================================================
List of players:
ShortMemDynamicThreshold: 0, False
ShortMemProbabilistic: 50
ShortMemProbabilisticFuzzy: 10, 5
Tit For Tat
==================================================
Results:
[Counter({'ShortMemDynamicThreshold: 0, False': 1,
          'ShortMemProbabilistic: 50': 1,
          'ShortMemProbabilisticFuzzy: 10, 5': 1,
          'Tit For Tat': 1}),
 Counter({'ShortMemProbabilisticFuzzy: 10, 5': 2, 'Tit For Tat': 2}),
 Counter({'Tit For Tat': 2, 'ShortMemProbabilisticFuzzy: 10, 5': 2}),
 Counter({'Tit For Tat': 2, 'ShortMemProbabilisticFuzzy: 10, 5': 2}),
 Counter({'Tit For Tat': 4})]
--------------------------------------------------
Score:
[[9.0, 9.0, 9.0, 9.0],
 [9.0, 9.0, 9.0, 9.0],
 [9.0, 9.0, 9.0, 9.0],
 [9.0, 9.0, 9.0, 9.0]]
***************************************************
***************************************************
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [2, 0]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [1, 3]
====================================
cloned = 1
killed = 2
cloned = 3
killed = 0
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [0, 2]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [1, 3]
====================================
cloned = 1
killed = 0
cloned = 3
killed = 2
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [2, 1]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [0, 3]
====================================
cloned = 0
killed = 2
cloned = 3
killed = 1
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [2, 1]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [0, 3]
====================================
cloned = 0
killed = 2
cloned = 3
killed = 1
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [2, 1]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [0, 3]
====================================
cloned = 0
killed = 2
cloned = 3
killed = 1
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [2, 1]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [0, 3]
====================================
cloned = 0
killed = 2
cloned = 3
killed = 1
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [0, 1]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [2, 3]
====================================
cloned = 2
killed = 0
cloned = 3
killed = 1
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [1, 0]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [2, 3]
====================================
cloned = 2
killed = 1
cloned = 3
killed = 0
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [2, 0]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [1, 3]
====================================
cloned = 1
killed = 2
cloned = 3
killed = 0
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [0, 2]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [1, 3]
====================================
cloned = 1
killed = 0
cloned = 3
killed = 2
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [2, 1]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [0, 3]
====================================
cloned = 0
killed = 2
cloned = 3
killed = 1
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [0, 2]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [1, 3]
====================================
cloned = 1
killed = 0
cloned = 3
killed = 2
Trial run 12/seed 535:
..................................................
winner: Tit For Tat
==================================================
List of players:
ShortMemDynamicThreshold: 0, False
ShortMemProbabilistic: 50
ShortMemProbabilisticFuzzy: 10, 5
Tit For Tat
==================================================
Results:
[Counter({'ShortMemDynamicThreshold: 0, False': 1,
          'ShortMemProbabilistic: 50': 1,
          'ShortMemProbabilisticFuzzy: 10, 5': 1,
          'Tit For Tat': 1}),
 Counter({'Tit For Tat': 2, 'ShortMemProbabilistic: 50': 2}),
 Counter({'ShortMemProbabilistic: 50': 2, 'Tit For Tat': 2}),
 Counter({'ShortMemProbabilistic: 50': 2, 'Tit For Tat': 2}),
 Counter({'ShortMemProbabilistic: 50': 2, 'Tit For Tat': 2}),
 Counter({'ShortMemProbabilistic: 50': 2, 'Tit For Tat': 2}),
 Counter({'ShortMemProbabilistic: 50': 2, 'Tit For Tat': 2}),
 Counter({'ShortMemProbabilistic: 50': 2, 'Tit For Tat': 2}),
 Counter({'Tit For Tat': 2, 'ShortMemProbabilistic: 50': 2}),
 Counter({'Tit For Tat': 2, 'ShortMemProbabilistic: 50': 2}),
 Counter({'ShortMemProbabilistic: 50': 2, 'Tit For Tat': 2}),
 Counter({'ShortMemProbabilistic: 50': 2, 'Tit For Tat': 2}),
 Counter({'Tit For Tat': 4})]
--------------------------------------------------
Score:
[[9.0, 9.0, 9.0, 9.0],
 [9.0, 9.0, 9.0, 9.0],
 [9.0, 9.0, 9.0, 9.0],
 [9.0, 9.0, 9.0, 9.0],
 [9.0, 9.0, 9.0, 9.0],
 [9.0, 9.0, 9.0, 9.0],
 [9.0, 9.0, 9.0, 9.0],
 [9.0, 9.0, 9.0, 9.0],
 [9.0, 9.0, 9.0, 9.0],
 [9.0, 9.0, 9.0, 9.0],
 [9.0, 9.0, 9.0, 9.0],
 [9.0, 9.0, 9.0, 9.0]]
***************************************************
***************************************************
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [1, 2]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [0, 3]
====================================
cloned = 0
killed = 1
cloned = 3
killed = 2
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [0, 1]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [2, 3]
====================================
cloned = 2
killed = 0
cloned = 3
killed = 1
Trial run 13/seed 536:
..................................................
winner: Tit For Tat
==================================================
List of players:
ShortMemDynamicThreshold: 0, False
ShortMemProbabilistic: 50
ShortMemProbabilisticFuzzy: 10, 5
Tit For Tat
==================================================
Results:
[Counter({'ShortMemDynamicThreshold: 0, False': 1,
          'ShortMemProbabilistic: 50': 1,
          'ShortMemProbabilisticFuzzy: 10, 5': 1,
          'Tit For Tat': 1}),
 Counter({'ShortMemDynamicThreshold: 0, False': 2, 'Tit For Tat': 2}),
 Counter({'Tit For Tat': 4})]
--------------------------------------------------
Score:
[[9.0, 9.0, 9.0, 9.0], [9.0, 9.0, 9.0, 9.0]]
***************************************************
***************************************************
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [2, 1]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [0, 3]
====================================
cloned = 0
killed = 2
cloned = 3
killed = 1
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [2, 0]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [1, 3]
====================================
cloned = 1
killed = 2
cloned = 3
killed = 0
Trial run 14/seed 537:
..................................................
winner: Tit For Tat
==================================================
List of players:
ShortMemDynamicThreshold: 0, False
ShortMemProbabilistic: 50
ShortMemProbabilisticFuzzy: 10, 5
Tit For Tat
==================================================
Results:
[Counter({'ShortMemDynamicThreshold: 0, False': 1,
          'ShortMemProbabilistic: 50': 1,
          'ShortMemProbabilisticFuzzy: 10, 5': 1,
          'Tit For Tat': 1}),
 Counter({'ShortMemDynamicThreshold: 0, False': 2, 'Tit For Tat': 2}),
 Counter({'Tit For Tat': 4})]
--------------------------------------------------
Score:
[[9.0, 9.0, 9.0, 9.0], [9.0, 9.0, 9.0, 9.0]]
***************************************************
***************************************************
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [2, 0]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [1, 3]
====================================
cloned = 1
killed = 2
cloned = 3
killed = 0
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [1, 2]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [0, 3]
====================================
cloned = 0
killed = 1
cloned = 3
killed = 2
Trial run 15/seed 538:
..................................................
winner: Tit For Tat
==================================================
List of players:
ShortMemDynamicThreshold: 0, False
ShortMemProbabilistic: 50
ShortMemProbabilisticFuzzy: 10, 5
Tit For Tat
==================================================
Results:
[Counter({'ShortMemDynamicThreshold: 0, False': 1,
          'ShortMemProbabilistic: 50': 1,
          'ShortMemProbabilisticFuzzy: 10, 5': 1,
          'Tit For Tat': 1}),
 Counter({'Tit For Tat': 2, 'ShortMemProbabilistic: 50': 2}),
 Counter({'Tit For Tat': 4})]
--------------------------------------------------
Score:
[[9.0, 9.0, 9.0, 9.0], [9.0, 9.0, 9.0, 9.0]]
***************************************************
***************************************************
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [1, 2]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [0, 3]
====================================
cloned = 0
killed = 1
cloned = 3
killed = 2
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [0, 2]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [1, 3]
====================================
cloned = 1
killed = 0
cloned = 3
killed = 2
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [2, 0]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [1, 3]
====================================
cloned = 1
killed = 2
cloned = 3
killed = 0
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [2, 0]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [1, 3]
====================================
cloned = 1
killed = 2
cloned = 3
killed = 0
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [1, 2]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [0, 3]
====================================
cloned = 0
killed = 1
cloned = 3
killed = 2
Trial run 16/seed 539:
..................................................
winner: Tit For Tat
==================================================
List of players:
ShortMemDynamicThreshold: 0, False
ShortMemProbabilistic: 50
ShortMemProbabilisticFuzzy: 10, 5
Tit For Tat
==================================================
Results:
[Counter({'ShortMemDynamicThreshold: 0, False': 1,
          'ShortMemProbabilistic: 50': 1,
          'ShortMemProbabilisticFuzzy: 10, 5': 1,
          'Tit For Tat': 1}),
 Counter({'ShortMemDynamicThreshold: 0, False': 2, 'Tit For Tat': 2}),
 Counter({'ShortMemDynamicThreshold: 0, False': 2, 'Tit For Tat': 2}),
 Counter({'Tit For Tat': 2, 'ShortMemDynamicThreshold: 0, False': 2}),
 Counter({'Tit For Tat': 2, 'ShortMemDynamicThreshold: 0, False': 2}),
 Counter({'Tit For Tat': 4})]
--------------------------------------------------
Score:
[[9.0, 9.0, 9.0, 9.0],
 [9.0, 9.0, 9.0, 9.0],
 [9.0, 9.0, 9.0, 9.0],
 [9.0, 9.0, 9.0, 9.0],
 [9.0, 9.0, 9.0, 9.0]]
***************************************************
***************************************************
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [2, 1]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [0, 3]
====================================
cloned = 0
killed = 2
cloned = 3
killed = 1
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [0, 2]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [1, 3]
====================================
cloned = 1
killed = 0
cloned = 3
killed = 2
Trial run 17/seed 540:
..................................................
winner: Tit For Tat
==================================================
List of players:
ShortMemDynamicThreshold: 0, False
ShortMemProbabilistic: 50
ShortMemProbabilisticFuzzy: 10, 5
Tit For Tat
==================================================
Results:
[Counter({'ShortMemDynamicThreshold: 0, False': 1,
          'ShortMemProbabilistic: 50': 1,
          'ShortMemProbabilisticFuzzy: 10, 5': 1,
          'Tit For Tat': 1}),
 Counter({'ShortMemDynamicThreshold: 0, False': 2, 'Tit For Tat': 2}),
 Counter({'Tit For Tat': 4})]
--------------------------------------------------
Score:
[[9.0, 9.0, 9.0, 9.0], [9.0, 9.0, 9.0, 9.0]]
***************************************************
***************************************************
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [1, 0]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [2, 3]
====================================
cloned = 2
killed = 1
cloned = 3
killed = 0
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [0, 2]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [1, 3]
====================================
cloned = 1
killed = 0
cloned = 3
killed = 2
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [2, 1]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [0, 3]
====================================
cloned = 0
killed = 2
cloned = 3
killed = 1
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [2, 1]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [0, 3]
====================================
cloned = 0
killed = 2
cloned = 3
killed = 1
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [0, 2]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [1, 3]
====================================
cloned = 1
killed = 0
cloned = 3
killed = 2
Trial run 18/seed 541:
..................................................
winner: Tit For Tat
==================================================
List of players:
ShortMemDynamicThreshold: 0, False
ShortMemProbabilistic: 50
ShortMemProbabilisticFuzzy: 10, 5
Tit For Tat
==================================================
Results:
[Counter({'ShortMemDynamicThreshold: 0, False': 1,
          'ShortMemProbabilistic: 50': 1,
          'ShortMemProbabilisticFuzzy: 10, 5': 1,
          'Tit For Tat': 1}),
 Counter({'Tit For Tat': 2, 'ShortMemProbabilisticFuzzy: 10, 5': 2}),
 Counter({'ShortMemProbabilisticFuzzy: 10, 5': 2, 'Tit For Tat': 2}),
 Counter({'ShortMemProbabilisticFuzzy: 10, 5': 2, 'Tit For Tat': 2}),
 Counter({'ShortMemProbabilisticFuzzy: 10, 5': 2, 'Tit For Tat': 2}),
 Counter({'Tit For Tat': 4})]
--------------------------------------------------
Score:
[[9.0, 9.0, 9.0, 9.0],
 [9.0, 9.0, 9.0, 9.0],
 [9.0, 9.0, 9.0, 9.0],
 [9.0, 9.0, 9.0, 9.0],
 [9.0, 9.0, 9.0, 9.0]]
***************************************************
***************************************************
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [0, 2]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [1, 3]
====================================
cloned = 1
killed = 0
cloned = 3
killed = 2
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [0, 1]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [2, 3]
====================================
cloned = 2
killed = 0
cloned = 3
killed = 1
Trial run 19/seed 542:
..................................................
winner: Tit For Tat
==================================================
List of players:
ShortMemDynamicThreshold: 0, False
ShortMemProbabilistic: 50
ShortMemProbabilisticFuzzy: 10, 5
Tit For Tat
==================================================
Results:
[Counter({'ShortMemDynamicThreshold: 0, False': 1,
          'ShortMemProbabilistic: 50': 1,
          'ShortMemProbabilisticFuzzy: 10, 5': 1,
          'Tit For Tat': 1}),
 Counter({'ShortMemProbabilistic: 50': 2, 'Tit For Tat': 2}),
 Counter({'Tit For Tat': 4})]
--------------------------------------------------
Score:
[[9.0, 9.0, 9.0, 9.0], [9.0, 9.0, 9.0, 9.0]]
***************************************************
***************************************************
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [0, 1]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [2, 3]
====================================
cloned = 2
killed = 0
cloned = 3
killed = 1
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [0, 1]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [2, 3]
====================================
cloned = 2
killed = 0
cloned = 3
killed = 1
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [2, 1]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [0, 3]
====================================
cloned = 0
killed = 2
cloned = 3
killed = 1
######################################
~~~ Scores: ~~~
[9.0, 9.0, 9.0, 9.0]
====================================
+++ Thresholds: +++
Percentile: 50%
Lower: 9.0
Upper: 9.0
====================================
lower list size: 0
upper list size: 0
====================================
*** Split into lower and upper lists: ***
lower:           [2, 0]
lower threshold: []
....................................
upper threshold: [0, 1, 2, 3]
upper:           [1, 3]
====================================
cloned = 1
killed = 2
cloned = 3
killed = 0
Trial run 20/seed 543:
..................................................
winner: Tit For Tat
==================================================
List of players:
ShortMemDynamicThreshold: 0, False
ShortMemProbabilistic: 50
ShortMemProbabilisticFuzzy: 10, 5
Tit For Tat
==================================================
Results:
[Counter({'ShortMemDynamicThreshold: 0, False': 1,
          'ShortMemProbabilistic: 50': 1,
          'ShortMemProbabilisticFuzzy: 10, 5': 1,
          'Tit For Tat': 1}),
 Counter({'ShortMemProbabilisticFuzzy: 10, 5': 2, 'Tit For Tat': 2}),
 Counter({'ShortMemProbabilisticFuzzy: 10, 5': 2, 'Tit For Tat': 2}),
 Counter({'ShortMemProbabilisticFuzzy: 10, 5': 2, 'Tit For Tat': 2}),
 Counter({'Tit For Tat': 4})]
--------------------------------------------------
Score:
[[9.0, 9.0, 9.0, 9.0],
 [9.0, 9.0, 9.0, 9.0],
 [9.0, 9.0, 9.0, 9.0],
 [9.0, 9.0, 9.0, 9.0]]
***************************************************
***************************************************
